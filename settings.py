"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

GDAL_LIBRARY_PATH = os.getenv('GDAL_LIBRARY_PATH')
GEOS_LIBRARY_PATH = os.getenv('GEOS_LIBRARY_PATH')

# BASE_DIR is the root directory of your Django project.
# It is the top-level folder that contains your manage.py file and all apps.
# You can use BASE_DIR to build paths to other folders or files in your project.
BASE_DIR = Path(__file__).resolve().parent.parent
# __file__ means "the path to this current Python file" (in this case, settings.py).
# Path(__file__) creates a Path object pointing to settings.py.
# .resolve() turns that into an absolute path (so it's always a full path, not relative).
# .parent gives you the folder containing settings.py (usually the 'backend' folder).
# .parent.parent goes up one more level, to the folder containing the 'backend' folder.
# This is usually the root folder of your Django project (where manage.py lives).
# So, BASE_DIR will point to your project's root directory.
# You can use BASE_DIR to easily build paths to other files or folders in your project,
# without worrying about where your code is run from.

# Load environment variables from .env file
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', '')

if not SECRET_KEY:
    raise ValueError("No DJANGO_SECRET_KEY found in environment or .env file.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",") if os.environ.get("ALLOWED_HOSTS") else ["localhost", "127.0.0.1"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_extensions',
    'rest_framework',
    'rest_framework_gis',
    'corsheaders',      # Enables Cross-Origin Resource Sharing (CORS) so the frontend (e.g. React) can talk to the backend (Django) from a different origin (like localhost:3000)
    'djoser',        # Django REST framework authentication library
    'rest_framework.authtoken',  # Token authentication for REST framework

    # My Apps
    'records.apps.RecordsConfig',
    'users.apps.UsersConfig',  # Custom user app for extending Django's default user model
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'urls'

# Specify the context processors as follows:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Add template folders here if needed
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
]

WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# If DATABASE_URL is set in environment, use it (for deployment)
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            ssl_require=True
        )
    }
    DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'
# Otherwise, use local settings (for development)
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'welsh_lidar_portal_db',
            'USER': 'postgres',
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
            'HOST': '127.0.0.1',
            'PORT': '5432'
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'NumericPasswordValidator'
        ),
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# The base URL for serving static files (CSS, JS, images used by your website's code)
STATIC_URL = 'static/'  # e.g., http://yourwebsite.com/static/style.css
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# The base URL for serving media files (files uploaded by users, like photos)
MEDIA_URL = '/media/'   # e.g., http://yourwebsite.com/media/photo.jpg

# The location on your computer/server where uploaded media files will be stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'backend', 'media')
# MEDIA_ROOT is the absolute path on your computer/server where uploaded media files will be stored.
# By default, it combines BASE_DIR (your project root) with 'media', so uploads go in a folder called 'media' inside your project.
# If you want uploads to go somewhere else, you can change MEDIA_ROOT to any folder path you like.

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for CORS. This allows the frontend to communicate with the backend.

AUTH_USER_MODEL = 'users.User'  # Use the custom user model defined in users/models.py

# This tells Django to use token-based login.
# When users log in, they get a token, and they must include that token to access secure pages or actions.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
}

DJOSER = {
    "USER_CREATE_PASSWORD_RETYPE": True,  # Require users to enter their password twice when registering. If True, you need to pass re_password to /users/ endpoint, to validate password equality.
    "SEND_ACTIVATION_EMAIL": False,  # Do not send activation emails. Set to True when deploying
}
